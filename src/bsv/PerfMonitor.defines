
// Copyright (c) 2016 Massachusetts Institute of Technology

// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import PerfModules::*;
import ModuleContext::*;

`define mkPerfModule(name,mkM,IFCType) \
[Module] mkM``V(Tuple2#(PerfMonitor, IFCType));\
    (* hide *)\
    let _m <- toSynthBoundary(name, mkM``0);\
    return _m;\
endmodule\
module [m] mkM(IFCType) provisos (IsModule#(m, a__), Context#(m, PerfContext));\
    (* hide *)\
    let _m <- fromSynthBoundary(name, mkM``V);\
    return _m;\
endmodule\
module [m] mkM``0(IFCType) provisos(IsModule#(m, a__), Context#(m, PerfContext))

`define SynthesizedPerfModuleDefinition(name,mkM,IFCType) \
(* synthesize *)\
module [Module] mkM``V(Tuple2#(PerfMonitor, IFCType));\
    (* hide *)\
    let _m <- toSynthBoundary(name, mkM``0);\
    return _m;\
endmodule\
module [m] mkM(IFCType) provisos (IsModule#(m, a__), Context#(m, PerfContext));\
    (* hide *)\
    let _m <- fromSynthBoundary(name, mkM``V);\
    return _m;\
endmodule\
module [m] mkM``0(IFCType) provisos (IsModule#(m, a__), Context#(m, PerfContext));

`define PerfModuleDefinition(name,mkM,IFCType) \
module [m] mkM(IFCType);

